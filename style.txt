<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Handbag Haven</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              accent: '#D946EF', // Fuchsia 500
              'accent-dark': '#C026D3', // Fuchsia 600
              muted: '#6B7280', // Gray 500
            },
          },
        },
      }
    </script>
  <script type="importmap">
{
  "imports": {
    "react-dom/client": "https://aistudiocdn.com/react-dom@19.2.0/client.js",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.2.0/",
    "react/": "https://aistudiocdn.com/react@^19.2.0/",
    "react": "https://aistudiocdn.com/react@^19.2.0"
  }
}
</script>
    <!-- Add Babel Standalone for in-browser JSX/TSX transformation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
  <body class="bg-gray-50">
    <div id="root"></div>
    <!-- Set script type to "text/babel" to be transformed -->
    <script type="text/babel" data-type="module">
import React from 'react';
import ReactDOM from 'react-dom/client';

// --- From constants.ts ---
const PRODUCTS = [
  {
    id: "h1",
    title: "Classic Leather Tote",
    price: 79.00,
    category: "tote",
    image: "https://picsum.photos/seed/h1/400/400"
  },
  {
    id: "h2",
    title: "Minimal Crossbody",
    price: 49.50,
    category: "crossbody",
    image: "https://picsum.photos/seed/h2/400/400"
  },
  {
    id: "h3",
    title: "Evening Clutch",
    price: 39.99,
    category: "clutch",
    image: "https://picsum.photos/seed/h3/400/400"
  },
  {
    id: "h4",
    title: "Casual Backpack",
    price: 89.00,
    category: "backpack",
    image: "https://picsum.photos/seed/h4/400/400"
  },
  {
    id: "h5",
    title: "Woven Straw Tote",
    price: 59.00,
    category: "tote",
    image: "https://picsum.photos/seed/h5/400/400"
  },
  {
    id: "h6",
    title: "Slim Wallet Clutch",
    price: 24.99,
    category: "clutch",
    image: "https://picsum.photos/seed/h6/400/400"
  },
  {
    id: "h7",
    title: "Adventure Backpack",
    price: 120.00,
    category: "backpack",
    image: "https://picsum.photos/seed/h7/400/400"
  },
  {
    id: "h8",
    title: "Sleek Crossbody",
    price: 65.50,
    category: "crossbody",
    image: "https://picsum.photos/seed/h8/400/400"
  }
];
const CATEGORIES = ['all', 'tote', 'clutch', 'crossbody', 'backpack'];
const SORT_OPTIONS = [
    { value: 'featured', label: 'Featured' },
    { value: 'price-asc', label: 'Price: Low to High' },
    { value: 'price-desc', label: 'Price: High to Low' },
];

// --- From components/Header.tsx ---
const ShoppingBagIcon = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
    </svg>
);
const Header = ({ websiteName, onSearchChange, cartCount, onCartClick, isAdmin, onAdminClick }) => {
  return (
    <header className="bg-white shadow-sm sticky top-0 z-40">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex-shrink-0">
            <h1 className="text-2xl font-bold text-accent">{websiteName}</h1>
          </div>
          <div className="hidden md:block">
            <div className="relative">
              <input
                type="search"
                placeholder="Search..."
                onChange={(e) => onSearchChange(e.target.value)}
                className="w-64 lg:w-96 pl-4 pr-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-dark focus:border-transparent transition"
              />
            </div>
          </div>
          <div className="ml-4 flex items-center gap-4">
            <div className="flex items-center gap-2">
                <span className="text-sm font-medium text-gray-600">Admin</span>
                <button
                    type="button"
                    className={`relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark ${isAdmin ? 'bg-accent' : 'bg-gray-200'}`}
                    role="switch"
                    aria-checked={isAdmin}
                    onClick={onAdminClick}
                >
                    <span
                    aria-hidden="true"
                    className={`inline-block w-5 h-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200 ${isAdmin ? 'translate-x-5' : 'translate-x-0'}`}
                    />
                </button>
            </div>
            <button
              onClick={onCartClick}
              className="relative p-2 rounded-full text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
            >
              <ShoppingBagIcon className="h-6 w-6" />
              {cartCount > 0 && (
                <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-accent rounded-full">
                  {cartCount}
                </span>
              )}
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

// --- From components/Controls.tsx ---
const Controls = ({ 
    categories, 
    sortOptions, 
    onCategoryChange, 
    onSortChange, 
    isAdmin, 
    onAddProductClick, 
    onExportClick, 
    onViewOrdersClick, 
    onEditSiteNameClick, 
    onManageAdminsClick,
    onManageCategoriesClick
}) => {
  return (
    <section className="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
      <div className="flex items-center gap-4">
        <div>
          <label htmlFor="categoryFilter" className="sr-only">Category:</label>
          <select
            id="categoryFilter"
            onChange={(e) => onCategoryChange(e.target.value)}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-accent-dark focus:border-transparent capitalize"
          >
            {categories.map(cat => (
              <option key={cat} value={cat} className="capitalize">{cat}</option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="sortSelect" className="sr-only">Sort by:</label>
          <select
            id="sortSelect"
            onChange={(e) => onSortChange(e.target.value)}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-accent-dark focus:border-transparent"
          >
            {sortOptions.map(opt => (
              <option key={opt.value} value={opt.value}>{opt.label}</option>
            ))}
          </select>
        </div>
      </div>
      
      {isAdmin && (
        <div className="flex items-center gap-2 flex-wrap justify-center">
          <button
            onClick={onViewOrdersClick}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
          >
            View Orders
          </button>
          <button
            onClick={onEditSiteNameClick}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
          >
            Edit Site Name
          </button>
           <button
            onClick={onManageCategoriesClick}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
          >
            Manage Categories
          </button>
          <button
            onClick={onManageAdminsClick}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
          >
            Manage Admins
          </button>
          <button
            onClick={onAddProductClick}
            className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
          >
            Add Product
          </button>
          <button
            onClick={onExportClick}
            className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark"
          >
            Export JSON
          </button>
        </div>
      )}
    </section>
  );
};

// --- From components/ProductCard.tsx ---
const EditIcon = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z" />
    </svg>
);
const DeleteIcon = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
    </svg>
);
const ProductCard = ({ product, onProductClick, isAdmin, onEdit, onDelete }) => {
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden group transform hover:-translate-y-1 transition-transform duration-300 flex flex-col relative">
        {isAdmin && (
            <div className="absolute top-2 right-2 z-10 flex flex-col gap-2">
                <button 
                    onClick={(e) => { e.stopPropagation(); onEdit(product); }} 
                    className="p-2 bg-white/80 rounded-full shadow-md hover:bg-white text-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    aria-label={`Edit ${product.title}`}
                >
                    <EditIcon className="h-5 w-5" />
                </button>
                <button 
                    onClick={(e) => { e.stopPropagation(); onDelete(product.id); }} 
                    className="p-2 bg-white/80 rounded-full shadow-md hover:bg-white text-red-600 focus:outline-none focus:ring-2 focus:ring-red-500"
                    aria-label={`Delete ${product.title}`}
                >
                    <DeleteIcon className="h-5 w-5" />
                </button>
            </div>
        )}
      <div className="relative">
        <img src={product.image} alt={product.title} className="w-full h-56 object-cover" />
      </div>
      <div className="p-4 flex flex-col flex-grow">
        <h3 className="text-lg font-semibold text-gray-800 truncate">{product.title}</h3>
        <div className="mt-2 text-xl font-bold text-accent">${product.price.toFixed(2)}</div>
        <div className="mt-auto pt-4">
            <button
            onClick={() => onProductClick(product)}
            className="w-full bg-gray-800 text-white py-2 px-4 rounded-md hover:bg-accent focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark transition-colors duration-300"
            >
            Quick View
            </button>
        </div>
      </div>
    </div>
  );
};

// --- From components/ProductGrid.tsx ---
const ProductGrid = ({ products, onProductClick, isAdmin, onEditProduct, onDeleteProduct }) => {
  return (
    <section className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
      {products.map(product => (
        <ProductCard 
            key={product.id} 
            product={product} 
            onProductClick={onProductClick}
            isAdmin={isAdmin}
            onEdit={onEditProduct}
            onDelete={onDeleteProduct}
        />
      ))}
    </section>
  );
};

// --- From components/ProductModal.tsx ---
const TwitterIcon = ({ className }) => (
    <svg className={className} viewBox="0 0 24 24" fill="currentColor"><path d="M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.7-1.49 2.048-2.578-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.4-1.47-2.572 0-4.658 2.086-4.658 4.66 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.878-.764-.025-1.482-.234-2.11-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.39.106-.803.163-1.227.163-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.51 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.2-.005-.402-.014-.602.91-.658 1.7-1.477 2.323-2.41z"></path></svg>
);
const FacebookIcon = ({ className }) => (
    <svg className={className} viewBox="0 0 24 24" fill="currentColor"><path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v2.385z"></path></svg>
);
const LinkIcon = ({ className }) => (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" /></svg>
);
const ProductModal = ({ product, onClose, onAddToCart }) => {
  const { useState } = React;
  const [quantity, setQuantity] = useState(1);
  const handleAddToCartClick = () => {
    onAddToCart(product, quantity);
  };
  const handleShare = (platform) => {
    const url = window.location.href;
    const text = `Check out this amazing ${product.title} from Handbag Haven!`;
    const encodedUrl = encodeURIComponent(url);
    const encodedText = encodeURIComponent(text);
    switch (platform) {
      case 'twitter':
        window.open(`https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedText}`, '_blank');
        break;
      case 'facebook':
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`, '_blank');
        break;
      case 'copy':
        navigator.clipboard.writeText(`${text} ${url}`).then(() => {
          alert('Link copied to clipboard!');
        }).catch(err => {
          console.error('Failed to copy text: ', err);
        });
        break;
    }
  };
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose} aria-modal="true">
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto flex flex-col md:flex-row" onClick={(e) => e.stopPropagation()}>
        <div className="w-full md:w-1/2">
          <img src={product.image} alt={product.title} className="w-full h-64 md:h-full object-cover rounded-t-lg md:rounded-l-lg md:rounded-t-none" />
        </div>
        <div className="w-full md:w-1/2 p-6 md:p-8 relative">
          <button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-gray-800">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          <h2 className="text-3xl font-bold text-gray-900 mb-2">{product.title}</h2>
          <p className="text-2xl font-bold text-accent mb-4">${product.price.toFixed(2)}</p>
          <p className="text-gray-600 mb-6 capitalize"><span className="font-semibold">Category:</span> {product.category}</p>
          <div className="flex items-center gap-4 mb-6">
            <label htmlFor="quantity" className="font-semibold text-gray-700">Quantity:</label>
            <input
              id="quantity"
              type="number"
              min="1"
              value={quantity}
              onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
              className="w-20 p-2 border border-gray-300 rounded-md text-center focus:outline-none focus:ring-2 focus:ring-accent-dark"
            />
          </div>
          <button
            onClick={handleAddToCartClick}
            className="w-full bg-accent text-white py-3 px-6 rounded-lg font-semibold text-lg hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark transition-colors duration-300"
          >
            Add to Cart
          </button>
          <div className="mt-6 pt-6 border-t">
            <h4 className="font-semibold text-gray-700 mb-2">Share this product:</h4>
            <div className="flex items-center gap-3">
              <button onClick={() => handleShare('twitter')} className="p-2 rounded-full text-[#1DA1F2] hover:bg-blue-50 transition" aria-label="Share on Twitter">
                <TwitterIcon className="h-6 w-6" />
              </button>
              <button onClick={() => handleShare('facebook')} className="p-2 rounded-full text-[#4267B2] hover:bg-blue-100 transition" aria-label="Share on Facebook">
                <FacebookIcon className="h-6 w-6" />
              </button>
              <button onClick={() => handleShare('copy')} className="p-2 rounded-full text-gray-600 hover:bg-gray-100 transition" aria-label="Copy link">
                <LinkIcon className="h-6 w-6" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// --- From components/CartItem.tsx ---
const CartItemComponent = ({ item, onUpdateQuantity, onRemoveItem }) => {
  return (
    <div className="flex items-center gap-4">
      <img src={item.image} alt={item.title} className="w-20 h-20 object-cover rounded-md" />
      <div className="flex-grow">
        <h4 className="font-semibold text-sm">{item.title}</h4>
        <p className="text-gray-500 text-xs">${item.price.toFixed(2)}</p>
        <div className="flex items-center mt-2">
          <button onClick={() => onUpdateQuantity(item.id, item.quantity - 1)} className="w-6 h-6 border rounded-l">-</button>
          <input 
            type="text" 
            value={item.quantity}
            readOnly
            className="w-8 h-6 text-center border-t border-b" 
          />
          <button onClick={() => onUpdateQuantity(item.id, item.quantity + 1)} className="w-6 h-6 border rounded-r">+</button>
        </div>
      </div>
      <div className="text-right">
        <p className="font-semibold">${(item.price * item.quantity).toFixed(2)}</p>
        <button onClick={() => onRemoveItem(item.id)} className="text-red-500 hover:text-red-700 text-xs mt-1">Remove</button>
      </div>
    </div>
  );
};

// --- From components/CartSidebar.tsx ---
const CartSidebar = ({ isOpen, onClose, cartItems, onUpdateQuantity, onRemoveItem, onCheckoutClick }) => {
  const cartTotal = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  return (
    <>
      <div 
        className={`fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}
        onClick={onClose}
      ></div>
      <aside className={`fixed top-0 right-0 h-full w-full max-w-md bg-white shadow-xl z-50 transform transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : 'translate-x-full'} flex flex-col`}>
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-xl font-semibold">Your Cart</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-800">
             <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div className="flex-grow overflow-y-auto p-4">
          {cartItems.length === 0 ? (
            <p className="text-center text-gray-500 mt-8">Your cart is empty.</p>
          ) : (
            <div className="space-y-4">
              {cartItems.map(item => (
                <CartItemComponent key={item.id} item={item} onUpdateQuantity={onUpdateQuantity} onRemoveItem={onRemoveItem} />
              ))}
            </div>
          )}
        </div>
        {cartItems.length > 0 && (
          <div className="p-4 border-t">
            <div className="flex justify-between items-center text-lg font-semibold mb-4">
              <span>Subtotal:</span>
              <span>${cartTotal.toFixed(2)}</span>
            </div>
            <button 
              className="w-full bg-accent text-white py-3 px-6 rounded-lg font-semibold hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark transition-colors duration-300"
              onClick={onCheckoutClick}
            >
              Proceed to Checkout
            </button>
          </div>
        )}
      </aside>
    </>
  );
};

// --- From components/ProductFormModal.tsx ---
const ProductFormModal = ({ product, categories, onClose, onSave }) => {
  const { useState, useEffect } = React;
  const [formData, setFormData] = useState({
    title: '',
    price: 0,
    category: categories[0] || '',
    image: '',
  });
  useEffect(() => {
    if (product) {
      setFormData({
        title: product.title,
        price: product.price,
        category: product.category,
        image: product.image,
      });
    } else {
      setFormData({
        title: '',
        price: 0,
        category: categories[0] || '',
        image: '',
      });
    }
  }, [product, categories]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'price' ? parseFloat(value) || 0 : value,
    }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.title || formData.price <= 0 || !formData.image) {
        alert('Please fill out all fields correctly. Price must be greater than 0.');
        return;
    }
    onSave(formData);
  };
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-lg" onClick={(e) => e.stopPropagation()}>
        <form onSubmit={handleSubmit} className="p-6">
          <div className="flex justify-between items-center mb-6 pb-4 border-b">
            <h2 className="text-2xl font-bold text-gray-800">{product ? 'Edit Product' : 'Add New Product'}</h2>
            <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
              <input type="text" name="title" id="title" value={formData.title} onChange={handleChange} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
            </div>
            <div>
              <label htmlFor="price" className="block text-sm font-medium text-gray-700">Price</label>
              <input type="number" name="price" id="price" value={formData.price} onChange={handleChange} required min="0.01" step="0.01" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
            </div>
            <div>
              <label htmlFor="category" className="block text-sm font-medium text-gray-700">Category</label>
              <select name="category" id="category" value={formData.category} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm capitalize">
                {categories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
              </select>
            </div>
            <div>
              <label htmlFor="image" className="block text-sm font-medium text-gray-700">Image URL</label>
              <input type="url" name="image" id="image" value={formData.image} onChange={handleChange} required placeholder="https://example.com/image.jpg" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
            </div>
          </div>
          <div className="mt-6 pt-4 flex justify-end gap-4 border-t">
            <button type="button" onClick={onClose} className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Cancel</button>
            <button type="submit" className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Save Product</button>
          </div>
        </form>
      </div>
    </div>
  );
};

// --- From components/CheckoutModal.tsx ---
const CheckoutModal = ({ isOpen, onClose, onPlaceOrder, cartItems }) => {
  const { useState } = React;
  const [email, setEmail] = useState('');
  const [whatsapp, setWhatsapp] = useState('');
  const cartTotal = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  const handleSubmit = (e) => {
    e.preventDefault();
    if (email && whatsapp) {
      onPlaceOrder({ email, whatsapp });
    } else {
      alert('Please fill in both email and WhatsApp number.');
    }
  };
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-md" onClick={(e) => e.stopPropagation()}>
        <form onSubmit={handleSubmit} className="p-6">
          <div className="flex justify-between items-center mb-6 pb-4 border-b">
            <h2 className="text-2xl font-bold text-gray-800">Checkout</h2>
            <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
          </div>
          <div className="mb-4">
            <h3 className="text-lg font-semibold mb-2">Order Summary</h3>
            <div className="max-h-40 overflow-y-auto space-y-2 pr-2">
                {cartItems.map(item => (
                    <div key={item.id} className="flex justify-between text-sm">
                        <span className="truncate pr-2">{item.title} x {item.quantity}</span>
                        <span>${(item.price * item.quantity).toFixed(2)}</span>
                    </div>
                ))}
            </div>
            <div className="flex justify-between font-bold text-lg mt-4 pt-2 border-t">
                <span>Total</span>
                <span>${cartTotal.toFixed(2)}</span>
            </div>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email Address</label>
              <input type="email" name="email" id="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" placeholder="you@example.com"/>
            </div>
            <div>
              <label htmlFor="whatsapp" className="block text-sm font-medium text-gray-700">WhatsApp Number</label>
              <input type="tel" name="whatsapp" id="whatsapp" value={whatsapp} onChange={(e) => setWhatsapp(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" placeholder="+1234567890"/>
            </div>
          </div>
          <div className="mt-6 pt-4 flex justify-end gap-4 border-t">
            <button type="button" onClick={onClose} className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Cancel</button>
            <button type="submit" className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Place Order</button>
          </div>
        </form>
      </div>
    </div>
  );
};

// --- From components/LoginModal.tsx ---
const LoginModal = ({ onClose, onLogin }) => {
  const { useState } = React;
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const handleLoginSubmit = (e) => {
    e.preventDefault();
    onLogin(loginEmail, loginPassword);
  };
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-sm" onClick={(e) => e.stopPropagation()}>
        <form onSubmit={handleLoginSubmit} className="p-6">
          <div className="flex justify-between items-center mb-6 pb-4 border-b">
            <h2 className="text-2xl font-bold text-gray-800">Admin Login</h2>
            <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
              <input type="email" name="email" id="email" value={loginEmail} onChange={(e) => setLoginEmail(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
              <input type="password" name="password" id="password" value={loginPassword} onChange={(e) => setLoginPassword(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
            </div>
          </div>
          <div className="mt-6 pt-4 flex justify-end gap-4 border-t">
            <button type="button" onClick={onClose} className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Cancel</button>
            <button type="submit" className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Login</button>
          </div>
        </form>
      </div>
    </div>
  );
};

// --- From components/OrdersModal.tsx ---
const getStatusColor = (status) => {
  switch (status) {
    case 'Pending': return 'bg-yellow-100 text-yellow-800';
    case 'Shipped': return 'bg-blue-100 text-blue-800';
    case 'Completed': return 'bg-green-100 text-green-800';
    case 'Cancelled': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};
const OrdersModal = ({ isOpen, onClose, orders, onUpdateStatus }) => {
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-4xl h-[90vh] flex flex-col" onClick={(e) => e.stopPropagation()}>
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-2xl font-bold text-gray-800">Customer Orders</h2>
          <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
        </div>
        <div className="flex-grow overflow-y-auto p-4">
          {orders.length === 0 ? (
            <p className="text-center text-gray-500 mt-8">No orders have been placed yet.</p>
          ) : (
            <div className="space-y-4">
              {orders.slice().reverse().map(order => (
                <div key={order.id} className="border rounded-lg p-4">
                  <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-2">
                    <div>
                      <p className="font-bold text-lg">Order #{order.id.split('_')[1]}</p>
                      <p className="text-sm text-gray-500">{new Date(order.createdAt).toLocaleString()}</p>
                    </div>
                    <div className="mt-2 sm:mt-0">
                      <select
                        value={order.status}
                        onChange={(e) => onUpdateStatus(order.id, e.target.value)}
                        className={`text-sm font-medium py-1 px-2 rounded-full border-none focus:ring-2 focus:ring-accent ${getStatusColor(order.status)}`}
                      >
                        <option value="Pending">Pending</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                      </select>
                    </div>
                  </div>
                  <div className="text-sm">
                    <p><strong>Customer:</strong> {order.customerDetails.email}</p>
                    <p><strong>WhatsApp:</strong> {order.customerDetails.whatsapp}</p>
                  </div>
                  <div className="mt-2 pt-2 border-t">
                    <h4 className="font-semibold mb-1">Items:</h4>
                    <ul className="list-disc list-inside text-sm text-gray-700">
                      {order.cartItems.map(item => (
                        <li key={item.id}>{item.title} x {item.quantity} - (${(item.price * item.quantity).toFixed(2)})</li>
                      ))}
                    </ul>
                  </div>
                   <div className="text-right font-bold text-lg mt-2">
                        Total: ${order.total.toFixed(2)}
                    </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// --- From components/SiteNameModal.tsx ---
const SiteNameModal = ({ isOpen, onClose, onSave, currentName }) => {
  const { useState, useEffect } = React;
  const [siteName, setSiteName] = useState(currentName);
  useEffect(() => {
    if (isOpen) {
      setSiteName(currentName);
    }
  }, [currentName, isOpen]);
  const handleSubmit = (e) => {
    e.preventDefault();
    if (siteName.trim()) {
      onSave(siteName.trim());
    } else {
      alert('Site name cannot be empty.');
    }
  };
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-md" onClick={(e) => e.stopPropagation()}>
        <form onSubmit={handleSubmit} className="p-6">
          <div className="flex justify-between items-center mb-6 pb-4 border-b">
            <h2 className="text-2xl font-bold text-gray-800">Edit Website Name</h2>
            <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
          </div>
          <div className="space-y-4">
            <div>
              <label htmlFor="siteName" className="block text-sm font-medium text-gray-700">Website Name</label>
              <input type="text" name="siteName" id="siteName" value={siteName} onChange={(e) => setSiteName(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm"/>
            </div>
          </div>
          <div className="mt-6 pt-4 flex justify-end gap-4 border-t">
            <button type="button" onClick={onClose} className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Cancel</button>
            <button type="submit" className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  );
};

// --- From components/AdminManagementModal.tsx ---
const AdminManagementModal = ({ isOpen, onClose, admins, currentUserEmail, onAddAdmin, onDeleteAdmin }) => {
  const { useState } = React;
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const handleAddSubmit = (e) => {
    e.preventDefault();
    if (!email || !password) {
        alert("Please enter both email and password.");
        return;
    }
    onAddAdmin({ email, password });
    setEmail('');
    setPassword('');
  };
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-2xl h-[90vh] flex flex-col" onClick={(e) => e.stopPropagation()}>
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-2xl font-bold text-gray-800">Manage Admins</h2>
          <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
        </div>
        <div className="flex-grow overflow-y-auto p-6 space-y-8">
            <div>
                <h3 className="text-lg font-semibold text-gray-700 mb-4 border-b pb-2">Add New Admin</h3>
                <form onSubmit={handleAddSubmit} className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div className="md:col-span-1">
                        <label htmlFor="newAdminEmail" className="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="newAdminEmail" value={email} onChange={(e) => setEmail(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
                    </div>
                    <div className="md:col-span-1">
                        <label htmlFor="newAdminPassword" className="block text-sm font-medium text-gray-700">Password</label>
                        <input type="password" id="newAdminPassword" value={password} onChange={(e) => setPassword(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm" />
                    </div>
                    <div className="md:col-span-1">
                        <button type="submit" className="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Add Admin</button>
                    </div>
                </form>
            </div>
            <div>
                <h3 className="text-lg font-semibold text-gray-700 mb-4 border-b pb-2">Current Admins</h3>
                <div className="space-y-3">
                    {admins.map(admin => (
                        <div key={admin.email} className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
                            <span className="text-gray-800">{admin.email}</span>
                            <button
                                onClick={() => onDeleteAdmin(admin.email)}
                                disabled={admin.email === currentUserEmail}
                                className="p-2 text-red-600 rounded-full hover:bg-red-100 disabled:text-gray-400 disabled:hover:bg-transparent focus:outline-none focus:ring-2 focus:ring-red-500 disabled:cursor-not-allowed"
                                aria-label={`Delete admin ${admin.email}`}
                            >
                                <DeleteIcon className="h-5 w-5" />
                            </button>
                        </div>
                    ))}
                </div>
            </div>
        </div>
      </div>
    </div>
  );
};

// --- From components/CategoryManagementModal.tsx ---
const CheckIcon = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
    </svg>
);
const CategoryManagementModal = ({ 
    isOpen, 
    onClose, 
    categories, 
    onAddCategory, 
    onUpdateCategory, 
    onDeleteCategory 
}) => {
  const { useState } = React;
  const [newCategoryName, setNewCategoryName] = useState('');
  const [editingCategory, setEditingCategory] = useState(null);
  const [editingValue, setEditingValue] = useState('');
  const handleAddSubmit = (e) => {
    e.preventDefault();
    onAddCategory(newCategoryName);
    setNewCategoryName('');
  };
  const handleEditClick = (name) => {
    setEditingCategory(name);
    setEditingValue(name);
  };
  const handleSaveEdit = (oldName) => {
    onUpdateCategory(oldName, editingValue);
    setEditingCategory(null);
    setEditingValue('');
  };
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-lg h-[80vh] flex flex-col" onClick={(e) => e.stopPropagation()}>
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-2xl font-bold text-gray-800">Manage Categories</h2>
          <button type="button" onClick={onClose} className="text-gray-500 hover:text-gray-800 text-2xl" aria-label="Close">&times;</button>
        </div>
        <div className="flex-grow overflow-y-auto p-6 space-y-6">
            <div>
                <h3 className="text-lg font-semibold text-gray-700 mb-2">Add New Category</h3>
                <form onSubmit={handleAddSubmit} className="flex gap-2">
                    <input type="text" value={newCategoryName} onChange={(e) => setNewCategoryName(e.target.value)} placeholder="e.g., Tote, Clutch" className="flex-grow border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-accent-dark sm:text-sm"/>
                    <button type="submit" className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-accent hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Add</button>
                </form>
            </div>
            <div>
                <h3 className="text-lg font-semibold text-gray-700 mb-2">Current Categories</h3>
                <div className="space-y-2">
                    {categories.map(cat => (
                        <div key={cat} className="flex justify-between items-center p-2 bg-gray-50 rounded-md">
                            {editingCategory === cat ? (
                                <input type="text" value={editingValue} onChange={(e) => setEditingValue(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && handleSaveEdit(cat)} autoFocus className="flex-grow border-b-2 border-accent bg-transparent focus:outline-none"/>
                            ) : (
                                <span className="text-gray-800 capitalize">{cat}</span>
                            )}
                            <div className="flex items-center gap-2">
                                {editingCategory === cat ? (
                                    <button onClick={() => handleSaveEdit(cat)} className="p-2 text-green-600 rounded-full hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-green-500" aria-label={`Save change for ${cat}`}><CheckIcon className="h-5 w-5" /></button>
                                ) : (
                                     <button onClick={() => handleEditClick(cat)} className="p-2 text-blue-600 rounded-full hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label={`Edit ${cat}`}><EditIcon className="h-5 w-5" /></button>
                                )}
                                <button onClick={() => onDeleteCategory(cat)} className="p-2 text-red-600 rounded-full hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-500" aria-label={`Delete ${cat}`}><DeleteIcon className="h-5 w-5" /></button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
        <div className="p-4 bg-gray-50 border-t flex justify-end">
             <button type="button" onClick={onClose} className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-dark">Done</button>
        </div>
      </div>
    </div>
  );
};


// --- From App.tsx ---
const { useState, useMemo, useCallback, useEffect } = React;
const initialAdmins = [
  { email: 'kingkhan00100923@gmail.com', password: 'iamawebdeveloper@001' }
];
const App = () => {
  const [products, setProducts] = useState(() => {
    try {
      const savedProducts = localStorage.getItem('handbag_products');
      return savedProducts ? JSON.parse(savedProducts) : PRODUCTS;
    } catch (e) {
      return PRODUCTS;
    }
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [sort, setSort] = useState('featured');
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [cart, setCart] = useState(() => {
    try {
      const savedCart = localStorage.getItem('handbag_cart');
      return savedCart ? JSON.parse(savedCart) : {};
    } catch (e) {
      return {};
    }
  });
  const [categories, setCategories] = useState(() => {
    try {
        const savedCategories = localStorage.getItem('handbag_categories');
        return savedCategories ? JSON.parse(savedCategories) : CATEGORIES.filter(c => c !== 'all');
    } catch (e) {
        return CATEGORIES.filter(c => c !== 'all');
    }
  });
  const [activeCategory, setActiveCategory] = useState('all');
  const [admins, setAdmins] = useState(() => {
    try {
      const savedAdmins = localStorage.getItem('handbag_admins');
      if (!savedAdmins || JSON.parse(savedAdmins).length === 0) {
        return initialAdmins;
      }
      return JSON.parse(savedAdmins);
    } catch (e) {
      return initialAdmins;
    }
  });
  const [loggedInAdmin, setLoggedInAdmin] = useState(null);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [isProductFormOpen, setIsProductFormOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [isAdminManagementOpen, setIsAdminManagementOpen] = useState(false);
  const [isCategoryManagementOpen, setIsCategoryManagementOpen] = useState(false);
  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);
  const [isOrdersModalOpen, setIsOrdersModalOpen] = useState(false);
  const [orders, setOrders] = useState(() => {
    try {
      const savedOrders = localStorage.getItem('handbag_orders');
      return savedOrders ? JSON.parse(savedOrders) : [];
    } catch (e) {
      return [];
    }
  });
  const [websiteName, setWebsiteName] = useState(() => {
    return localStorage.getItem('handbag_website_name') || 'Handbag Haven';
  });
  const [isSiteNameModalOpen, setIsSiteNameModalOpen] = useState(false);

  useEffect(() => localStorage.setItem('handbag_admins', JSON.stringify(admins)), [admins]);
  useEffect(() => localStorage.setItem('handbag_website_name', websiteName), [websiteName]);
  useEffect(() => localStorage.setItem('handbag_categories', JSON.stringify(categories)), [categories]);
  
  const isAdmin = !!loggedInAdmin;
  const updateProducts = (newProducts) => {
    setProducts(newProducts);
    localStorage.setItem('handbag_products', JSON.stringify(newProducts));
  };
  const updateCart = (newCart) => {
    setCart(newCart);
    localStorage.setItem('handbag_cart', JSON.stringify(newCart));
  };
  const updateOrders = (newOrders) => {
    setOrders(newOrders);
    localStorage.setItem('handbag_orders', JSON.stringify(newOrders));
  }
  const handleUpdateWebsiteName = (newName) => {
    setWebsiteName(newName);
    setIsSiteNameModalOpen(false);
  };
  const filteredAndSortedProducts = useMemo(() => {
    let result = products
      .filter(p => activeCategory === 'all' || p.category === activeCategory)
      .filter(p => p.title.toLowerCase().includes(searchQuery.toLowerCase()));
    switch (sort) {
      case 'price-asc': result.sort((a, b) => a.price - b.price); break;
      case 'price-desc': result.sort((a, b) => b.price - a.price); break;
      default: break;
    }
    return result;
  }, [products, searchQuery, activeCategory, sort]);
  const handleAddToCart = useCallback((product, quantity) => {
    const newCart = { ...cart };
    if (newCart[product.id]) {
      newCart[product.id].quantity += quantity;
    } else {
      newCart[product.id] = { ...product, quantity };
    }
    updateCart(newCart);
    setSelectedProduct(null);
    setIsCartOpen(true);
  }, [cart]);
  const handleUpdateQuantity = useCallback((productId, newQuantity) => {
    const newCart = { ...cart };
    if (newQuantity > 0) {
      if (newCart[productId]) newCart[productId].quantity = newQuantity;
    } else {
      delete newCart[productId];
    }
    updateCart(newCart);
  }, [cart]);
  const handleRemoveItem = useCallback((productId) => {
    const newCart = { ...cart };
    delete newCart[productId];
    updateCart(newCart);
  }, [cart]);
  const handleOpenProductForm = (product) => {
    setEditingProduct(product);
    setIsProductFormOpen(true);
  };
  const handleCloseProductForm = () => {
    setEditingProduct(null);
    setIsProductFormOpen(false);
  };
  const handleSaveProduct = (productData) => {
    if (editingProduct) {
      updateProducts(products.map(p => p.id === editingProduct.id ? { ...p, ...productData } : p));
    } else {
      updateProducts([...products, { id: `h${Date.now()}`, ...productData }]);
    }
    handleCloseProductForm();
  };
  const handleDeleteProduct = (productId) => {
    if (window.confirm('Are you sure you want to delete this product?')) {
      updateProducts(products.filter(p => p.id !== productId));
    }
  };
  const handleExportProducts = () => {
    const dataStr = JSON.stringify(products, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'products.json';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };
  const cartCount = useMemo(() => Object.values(cart).reduce((sum, item) => sum + item.quantity, 0), [cart]);
  const cartItems = useMemo(() => Object.values(cart), [cart]);
  const handleCheckout = () => {
    setIsCartOpen(false);
    setIsCheckoutOpen(true);
  };
  const handlePlaceOrder = (customerDetails) => {
    const newOrder = {
      id: `ord_${Date.now()}`,
      customerDetails,
      cartItems,
      total: cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0),
      createdAt: new Date().toISOString(),
      status: 'Pending',
    };
    updateOrders([...orders, newOrder]);
    alert('Thank you for your order! We will contact you shortly via email or WhatsApp to confirm the details.');
    updateCart({});
    setIsCheckoutOpen(false);
  };
  const handleLogin = (email, password) => {
    const admin = admins.find(a => a.email === email && a.password === password);
    if (admin) {
      setLoggedInAdmin(email);
      setIsLoginOpen(false);
    } else {
      alert('Invalid email or password.');
    }
  };
  const handleLogout = () => setLoggedInAdmin(null);
  const handleAdminClick = () => isAdmin ? handleLogout() : setIsLoginOpen(true);
  const handleAddAdmin = (newAdmin) => {
    if (admins.some(a => a.email === newAdmin.email)) {
        alert('An admin with this email already exists.');
        return;
    }
    setAdmins(prev => [...prev, newAdmin]);
    alert('New admin added successfully!');
  };
  const handleDeleteAdmin = (emailToDelete) => {
    if (admins.length <= 1) {
        alert('You cannot delete the only admin account.');
        return;
    }
    if (window.confirm(`Are you sure you want to delete the admin: ${emailToDelete}?`)) {
        setAdmins(prev => prev.filter(a => a.email !== emailToDelete));
    }
  };
  const handleUpdateOrderStatus = (orderId, status) => {
    updateOrders(orders.map(o => o.id === orderId ? { ...o, status } : o));
  };
  const handleAddCategory = (name) => {
    const newName = name.trim().toLowerCase();
    if (!newName) {
      alert('Category name cannot be empty.');
      return;
    }
    if (categories.some(c => c.toLowerCase() === newName)) {
      alert('This category already exists.');
      return;
    }
    setCategories(prev => [...prev, name.trim()]);
  };
  const handleUpdateCategory = (oldName, newName) => {
    const trimmedNewName = newName.trim();
    if (!trimmedNewName) {
        alert('Category name cannot be empty.');
        return;
    }
    if (categories.some(c => c.toLowerCase() === trimmedNewName.toLowerCase() && c.toLowerCase() !== oldName.toLowerCase())) {
        alert('Another category with this name already exists.');
        return;
    }
    updateProducts(products.map(p => p.category === oldName ? { ...p, category: trimmedNewName } : p));
    setCategories(prev => prev.map(c => c === oldName ? trimmedNewName : c));
  };
  const handleDeleteCategory = (name) => {
    if (products.some(p => p.category === name)) {
      alert(`Cannot delete "${name}" because it is currently assigned to one or more products. Please re-assign them first.`);
      return;
    }
    if (window.confirm(`Are you sure you want to delete the category "${name}"?`)) {
      setCategories(prev => prev.filter(c => c !== name));
      if (activeCategory === name) setActiveCategory('all');
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header websiteName={websiteName} onSearchChange={setSearchQuery} cartCount={cartCount} onCartClick={() => setIsCartOpen(true)} isAdmin={isAdmin} onAdminClick={handleAdminClick} />
      <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-grow">
        <Controls categories={['all', ...categories]} sortOptions={SORT_OPTIONS} onCategoryChange={setActiveCategory} onSortChange={(val) => setSort(val)} isAdmin={isAdmin} onAddProductClick={() => handleOpenProductForm(null)} onExportClick={handleExportProducts} onViewOrdersClick={() => setIsOrdersModalOpen(true)} onEditSiteNameClick={() => setIsSiteNameModalOpen(true)} onManageAdminsClick={() => setIsAdminManagementOpen(true)} onManageCategoriesClick={() => setIsCategoryManagementOpen(true)} />
        <ProductGrid products={filteredAndSortedProducts} onProductClick={setSelectedProduct} isAdmin={isAdmin} onEditProduct={handleOpenProductForm} onDeleteProduct={handleDeleteProduct} />
      </main>
      <footer className="text-center py-4 text-gray-500 text-sm">
        {websiteName} &copy; {new Date().getFullYear()}
      </footer>
      {isLoginOpen && <LoginModal onClose={() => setIsLoginOpen(false)} onLogin={handleLogin} />}
      {selectedProduct && <ProductModal product={selectedProduct} onClose={() => setSelectedProduct(null)} onAddToCart={handleAddToCart} />}
      {isAdmin && isProductFormOpen && <ProductFormModal product={editingProduct} onClose={handleCloseProductForm} onSave={handleSaveProduct} categories={categories} />}
      {isAdmin && isSiteNameModalOpen && <SiteNameModal isOpen={isSiteNameModalOpen} onClose={() => setIsSiteNameModalOpen(false)} onSave={handleUpdateWebsiteName} currentName={websiteName} />}
      {isAdmin && isAdminManagementOpen && <AdminManagementModal isOpen={isAdminManagementOpen} onClose={() => setIsAdminManagementOpen(false)} admins={admins} currentUserEmail={loggedInAdmin} onAddAdmin={handleAddAdmin} onDeleteAdmin={handleDeleteAdmin} />}
      {isAdmin && isCategoryManagementOpen && <CategoryManagementModal isOpen={isCategoryManagementOpen} onClose={() => setIsCategoryManagementOpen(false)} categories={categories} onAddCategory={handleAddCategory} onUpdateCategory={handleUpdateCategory} onDeleteCategory={handleDeleteCategory} />}
      {isCheckoutOpen && <CheckoutModal isOpen={isCheckoutOpen} onClose={() => setIsCheckoutOpen(false)} onPlaceOrder={handlePlaceOrder} cartItems={cartItems} />}
      {isAdmin && isOrdersModalOpen && <OrdersModal isOpen={isOrdersModalOpen} onClose={() => setIsOrdersModalOpen(false)} orders={orders} onUpdateStatus={handleUpdateOrderStatus} />}
      <CartSidebar isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} cartItems={cartItems} onUpdateQuantity={handleUpdateQuantity} onRemoveItem={handleRemoveItem} onCheckoutClick={handleCheckout} />
    </div>
  );
};


// --- From index.tsx ---
const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}
const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
    </script>
  </body>
</html>